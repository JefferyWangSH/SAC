#ifndef STOCHASTIC_ANALYTIC_CONTINUATION_MEASURE_H
#define STOCHASTIC_ANALYTIC_CONTINUATION_MEASURE_H
#pragma once

/*
 *  This head file includes Measure class to obtain spectrum functions of statistical significance
 *  from weight configurations generated by SAC.
 */

#include <ctime>

#include "sac.h"


class Measure {

public:
    // measuring parameters
    int nbin = 20;
    int nBetweenBins = 5;
    int nstep = 100;
    int nwarm = (int)pow(10, 5);

    // SAC class and sampling parameters
    SAC sac;
    double theta = exp(7);
    int nCst = 4;

    // input/output filename
    std::string infilename = "../results/benchmark_g.txt";
    std::string outfilename = "../results/output.txt";
    bool is_data_read = false;

    // record cpu time
    time_t begin_t = clock(), end_t = clock();


    Measure() = default;

    /* set parameters */
    void set_SAC_params(int lt, double beta, int nOmega, double omegaMin, double omegaMax);

    void set_meas_params(int nbin, int nBetweenBins, int nstep, int nwarm);

    void set_sampling_params(const double &theta, const int &nCst);

    void set_file_name(const std::string &infilename, const std::string &outfilename);

    /* prepare for measuring
     * once input file was changed, prepare operation is needed before measuring. todo: check is_data_read. */
    void prepare();


private:


};

#endif //STOCHASTIC_ANALYTIC_CONTINUATION_MEASURE_H
